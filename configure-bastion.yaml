- name:  Add hypervisor host in inventory
  hosts: localhost
  vars_files:
    - variables.yaml
    - vault-variables.yaml
    - bm-ansible-nodes.json
  tasks:
  - name: Add all hypervisor group-host
    add_host:
      name: "{{ item.hypervisor_name }}"
      ansible_ssh_user: "{{ item.hypervisor_user }}"
      ansible_ssh_private_key_file: "{{ item.hypervisor_ssh_key }}"
      groups:
        - hypervisor_host
    when:
      - item.state == "present"
    with_items: "{{ bastion_nodes }}"
    when: item.hypervisor_name != "localhost"

- name:  Add Bastion VM/Node
  hosts: localhost
  vars_files:
    - variables.yaml
    - vault-variables.yaml
    - bm-ansible-nodes.json
  tasks:
  - name: Add bastion group-host - no localhost
    add_host:
      name: "{{ item.name }}.{{ domain }}"
      ansible_ssh_pass: "{{ secure_password }}"
      ansible_ssh_user: kni
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o ProxyCommand="ssh -W %h:%p -q {{ item.hypervisor_user }}@{{ item.hypervisor_name }}"'
      groups:
        - bastion
    with_items:
      - "{{ bastion_nodes }}"
    when: item.hypervisor_name != "localhost"

  - name: Add bastion group-host - localhost
    add_host:
      name: "{{ item.name }}.{{ domain }}"
      ansible_ssh_pass: "{{ secure_password }}"
      ansible_ssh_user: kni
      ansible_ssh_common_args: '-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null '
      groups:
        - bastion
    with_items:
      - "{{ bastion_nodes }}"
    when: item.hypervisor_name == "localhost"

- name:  Prepare Bastion Node
  hosts: bastion
  vars_files:
    - variables.yaml
    - vault-variables.yaml
    - bm-ansible-nodes.json
  tasks:
  - name: Download openshift-client-linux
    get_url:
      url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocpversion }}/openshift-client-linux.tar.gz"
      dest: /home/kni/openshift-client-linux.tar.gz
      mode: 0664

  - name: Download openshift-install-linux
    get_url:
      url: "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocpversion }}/openshift-install-linux.tar.gz"
      dest: /home/kni/openshift-install-linux.tar.gz
      mode: 0664

  - name: Uncompress openshift-client-linux.tar.gz
    shell: |
      tar -xvf /home/kni/openshift-client-linux.tar.gz -C /usr/bin/
    become: True

  - name: Uncompress openshift-install-linux.tar.gz
    shell: |
      tar -xvf /home/kni/openshift-install-linux.tar.gz -C /usr/bin/
    become: True

  - name: Create bash completion file
    shell: |
      oc completion bash > /etc/bash_completion.d/openshift
      openshift-install completion bash > /etc/bash_completion.d/openshift-install
    become: True

  - name: Copy pull-secret.txt
    copy:
      src: "{{ pull_secret_file }}"
      dest: /home/kni/pull-secret.txt
      owner: kni
      group: kni
      mode: 0600

  - name: Extract openshift-baremetal-install binary
    shell: |
      export RELEASE_IMAGE=$(curl -s https://mirror.openshift.com/pub/openshift-v4/clients/ocp/{{ ocpversion }}/release.txt | grep 'Pull From: quay.io' | awk -F ' ' '{print $3}')
      oc adm release extract --registry-config "/home/kni/pull-secret.txt" --command=openshift-baremetal-install --to "/home/kni" ${RELEASE_IMAGE}
      sudo cp /home/kni/openshift-baremetal-install /usr/bin/

  - name: Create /home/kni/rhcos_image_cache directory
    file:
      path: /home/kni/rhcos_image_cache
      state: directory
      owner: kni
      group: kni

  - name: Set selinux context for /home/kni/rhcos_image_cache
    shell: |
      sudo semanage fcontext -a -t httpd_sys_content_t "/home/kni/rhcos_image_cache(/.*)?"
      sudo restorecon -Rv /home/kni/rhcos_image_cache

  - name: Ensure libvirt is installed
    dnf:
      name:
        - libvirt
        - qemu-kvm
        - mkisofs
        - python3-devel
        - jq
        - ipmitool
      state: present
    become: True

  - name: Add kni to libvirt group
    user:
      name: kni
      append: True
      groups: libvirt
    become: True

  - name: Enable and start libvirtd
    systemd:
      name: libvirtd
      enabled: True
      state: started
    become: True

  - name: Configure libvirt pool
    shell: |
      virsh pool-define-as --name default --type dir --target /var/lib/libvirt/images
      virsh pool-start default
      virsh pool-autostart default
    become: True
  
  - name: Create baremetal-net.sh
    template:
      src: ansible-templates/root/baremetal-net.sh
      dest: /root/baremetal-net.sh
      owner: root
      group: root
      mode: 0755
    become: True

  - name: Execute baremetal-net.sh
    shell: |
      nohup /root/baremetal-net.sh
    become: True

  - name: Create provisioning-net.sh
    template:
      src: ansible-templates/root/provisioning-net.sh
      dest: /root/provisioning-net.sh
      owner: root
      group: root
      mode: 0755
    become: True

  - name: Execute provisioning-net.sh
    shell: |
      nohup /root/provisioning-net.sh &
    become: True

  - name: Reboot bastion
    reboot:
    become: True

  # old version till 4.9
  #- name: Download RHCOS images
  #  shell: |
  #    export COMMIT_ID=$(/usr/bin/openshift-baremetal-install version | grep '^built from commit' | awk '{print $4}')
  #    export RHCOS_OPENSTACK_URI=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json  | jq .images.openstack.path | sed 's/"//g')
  #    export RHCOS_QEMU_URI=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json  | jq .images.qemu.path | sed 's/"//g')
  #    export RHCOS_PATH=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json | jq .baseURI | sed 's/"//g')
  #    export RHCOS_QEMU_SHA_UNCOMPRESSED=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json  | jq -r '.images.qemu["uncompressed-sha256"]')
  #    export RHCOS_OPENSTACK_SHA_COMPRESSED=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json  | jq -r '.images.openstack.sha256')
  #    
  #    curl -L ${RHCOS_PATH}${RHCOS_QEMU_URI} -o /home/kni/rhcos_image_cache/${RHCOS_QEMU_URI}
  #    curl -L ${RHCOS_PATH}${RHCOS_OPENSTACK_URI} -o /home/kni/rhcos_image_cache/${RHCOS_OPENSTACK_URI}

  - name: Download RHCOS images
    shell: |
      export RHCOS_QEMU_URI=$(/usr/bin/openshift-baremetal-install coreos print-stream-json | jq -r --arg ARCH "$(arch)" '.architectures[$ARCH].artifacts.qemu.formats["qcow2.gz"].disk.location')
      export RHCOS_QEMU_PATH=$(/usr/bin/openshift-baremetal-install coreos print-stream-json | jq -r --arg ARCH "$(arch)" '.architectures[$ARCH].artifacts.qemu.formats["qcow2.gz"].disk["sha256"]')
      export RHCOS_QEMU_UNCOMPRESSED_SHA256=$(/usr/bin/openshift-baremetal-install coreos print-stream-json | jq -r --arg ARCH "$(arch)" '.architectures[$ARCH].artifacts.qemu.formats["qcow2.gz"].disk["uncompressed-sha256"]')

      curl -C - -L ${RHCOS_QEMU_URI} -o /home/kni/rhcos_image_cache/${RHCOS_QEMU_PATH}

      export BAREMETAL_IP=$(ip addr show dev baremetal | awk '/inet /{print $2}' | cut -d"/" -f1)
      export BOOTSTRAP_OS_IMAGE="http://${BAREMETAL_IP}:8080/${RHCOS_QEMU_PATH}?sha256=${RHCOS_QEMU_UNCOMPRESSED_SHA256}"
      echo "bootstrapOSImage: ${BOOTSTRAP_OS_IMAGE}" > /home/kni/osimage.txt

  - name: Create image cache container
    shell: |
      podman stop rhcos_image_cache
      podman rm rhcos_image_cache
      #podman run -d --name rhcos_image_cache -v /home/kni/rhcos_image_cache:/var/www/html -p 8080:8080/tcp registry.centos.org/centos/httpd-24-centos7:latest
      podman run -d --name rhcos_image_cache -v /home/kni/rhcos_image_cache:/var/www/html -p 8080:8080/tcp quay.io/centos7/httpd-24-centos7:latest

  #- name: Create md5sum file and osimage.txt
  #  shell: |
  #    export COMMIT_ID=$(/usr/bin/openshift-baremetal-install version | grep '^built from commit' | awk '{print $4}')
  #    export RHCOS_OPENSTACK_URI=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json  | jq .images.openstack.path | sed 's/"//g')
  #    export RHCOS_QEMU_URI=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json  | jq .images.qemu.path | sed 's/"//g')
  #    export RHCOS_PATH=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json | jq .baseURI | sed 's/"//g')
  #    export RHCOS_QEMU_SHA_UNCOMPRESSED=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json  | jq -r '.images.qemu["uncompressed-sha256"]')
  #    export RHCOS_OPENSTACK_SHA_COMPRESSED=$(curl -s -S https://raw.githubusercontent.com/openshift/installer/$COMMIT_ID/data/data/rhcos.json  | jq -r '.images.openstack.sha256')
  #    export BAREMETAL_IP=$(ip addr show dev baremetal | awk '/inet /{print $2}' | cut -d"/" -f1)
  #    export RHCOS_OPENSTACK_SHA256=$(zcat /home/kni/rhcos_image_cache/${RHCOS_OPENSTACK_URI} | sha256sum | awk '{print $1}')
  #    export RHCOS_QEMU_SHA256=$(zcat /home/kni/rhcos_image_cache/${RHCOS_QEMU_URI} | sha256sum | awk '{print $1}')
  #    export CLUSTER_OS_IMAGE="http://${BAREMETAL_IP}:8080/${RHCOS_OPENSTACK_URI}?sha256=${RHCOS_OPENSTACK_SHA256}"
  #    export BOOTSTRAP_OS_IMAGE="http://${BAREMETAL_IP}:8080/${RHCOS_QEMU_URI}?sha256=${RHCOS_QEMU_SHA256}"
  #    echo "${RHCOS_OPENSTACK_SHA256}  ${RHCOS_OPENSTACK_URI}" > /home/kni/rhcos_image_cache/rhcos-ootpa-latest.qcow2.md5sum
  #    echo "    bootstrapOSImage: ${BOOTSTRAP_OS_IMAGE}" > /home/kni/osimage.txt
  #    echo "    clusterOSImage: ${CLUSTER_OS_IMAGE}" >> /home/kni/osimage.txt

  - name: Create openshift-baremetal-install completion bash
    shell: |
      openshift-baremetal-install completion bash > /etc/bash_completion.d/openshift-baremetal-install
    become: True

  - name: Copy install-config.yaml
    template:
      src: ansible-templates/home/kni/install-config.yaml
      dest: /home/kni/install-config.yaml
      backup: True
      owner: kni
      group: kni

  - name: Insert pullSecret in install-config.yaml
    shell: |
      echo -n "pullSecret: '" >> /home/kni/install-config.yaml
      cat /home/kni/pull-secret.txt >> /home/kni/install-config.yaml
      sed -E -i "s@^(pullSecret: .*)@\1'@g" /home/kni/install-config.yaml

  - name: Insert bootstrapOSImage in install-config.yaml
    shell: |
      export BOI=$(sed -E 's/^bootstrapOSImage:\s+//g' /home/kni/osimage.txt)
      sed -i "s#BOOTSTRAPOSIMAGE#${BOI}#g" /home/kni/install-config.yaml

  - name: Insert sshKey in install-config.yaml
    shell: |
      echo -n "sshKey: '" >> /home/kni/install-config.yaml
      cat /home/kni/.ssh/id_rsa.pub >> /home/kni/install-config.yaml
      sed -E -i "s@^(sshKey: .*)@\1'@g" /home/kni/install-config.yaml

  - name: Create clusterconfigs directory
    shell: |
      rm -rf /home/kni/{{ cluster_name }}
      mkdir -p /home/kni/{{ cluster_name }}/openshift

  - name: Copy install-config.yaml to clusterconfigs directory
    shell: |
      cp -f install-config.yaml /home/kni/{{ cluster_name }}

  - name: Remove old bootstrap resources
    shell: |
      for i in $(sudo virsh list --all | tail -n +3 | grep bootstrap | awk {'print $2'});
      do
        sudo virsh destroy $i;
        sudo virsh undefine $i;
        sudo virsh vol-delete $i --pool $i;
        sudo virsh vol-delete $i.ign --pool $i;
        sudo virsh pool-destroy $i;
        sudo virsh pool-undefine $i;
      done

  - name: Create vimrc file
    template:
      src: ansible-templates/home/kni/vimrc
      dest: /home/kni/.vimrc
      owner: kni
      group: kni
      mode: 0664

  - name: Restart image cache container
    shell: |
      podman stop rhcos_image_cache
      podman start rhcos_image_cache
